#include <stdio.h>
#include <string.h>

char nt[20][10], prod[20][20][50];
int prodCount[20], ntCount;

int derive(char symbol, char *target) {
    int lenT = strlen(target);

    for (int i = 0; i < ntCount; i++) {
        if (nt[i][0] == symbol) {
            for (int j = 0; j < prodCount[i]; j++) {
                char *prodStr = prod[i][j];
                int lenP = strlen(prodStr);

                int allTerminals = 1;
                for (int k = 0; k < lenP; k++) {
                    if (prodStr[k] >= 'A' && prodStr[k] <= 'Z') {
                        allTerminals = 0;
                        break;
                    }
                }

                // Case 1: production is fully terminal
                if (allTerminals) {
                    if (strcmp(prodStr, target) == 0)
                        return 1;
                } 
                // Case 2: production has non-terminals
                else {
                    int pos = 0, matched = 1;

                    for (int k = 0; k < lenP; k++) {
                        if (prodStr[k] >= 'A' && prodStr[k] <= 'Z') {
                            int matchedNonTerminal = 0;

                            // try splitting the target string
                            for (int splitLen = 1; splitLen <= lenT - pos; splitLen++) {
                                char sub[50];
                                strncpy(sub, target + pos, splitLen);
                                sub[splitLen] = '\0';

                                if (derive(prodStr[k], sub)) {
                                    pos += splitLen;
                                    matchedNonTerminal = 1;
                                    break;
                                }
                            }

                            if (!matchedNonTerminal) {
                                matched = 0;
                                break;
                            }
                        } else {
                            if (pos >= lenT || prodStr[k] != target[pos]) {
                                matched = 0;
                                break;
                            }
                            pos++;
                        }
                    }

                    if (matched && pos == lenT)
                        return 1;
                }
            }
        }
    }
    return 0;
}

int main() {
    char start, str[50];

    printf("Enter number of non-terminals: ");
    scanf("%d", &ntCount);

    for (int i = 0; i < ntCount; i++) {
        printf("Enter non-terminal %d: ", i + 1);
        scanf("%s", nt[i]);

        printf("Enter number of productions for %s: ", nt[i]);
        scanf("%d", &prodCount[i]);

        for (int j = 0; j < prodCount[i]; j++) {
            printf("Enter production %d for %s: ", j + 1, nt[i]);
            scanf("%s", prod[i][j]);
        }
    }

    printf("Enter start symbol: ");
    scanf(" %c", &start);

    printf("Enter input string to check: ");
    scanf("%s", str);

    if (derive(start, str))
        printf("YES. The string can be generated by the grammar.\n");
    else
        printf("NO. The string cannot be generated by the grammar.\n");

    return 0;
}
